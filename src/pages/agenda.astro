---
import Layout from "../layouts/ContentLayout.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

// Charger tous les fichiers JSON des événements
const allTimelines = await getCollection("agenda");

const today = new Date();
today.setHours(0, 0, 0, 0);

const moisFrancais = [
  "janvier", "février", "mars", "avril", "mai", "juin",
  "juillet", "août", "septembre", "octobre", "novembre", "décembre"
];

function formatDateRange(startDate: Date, endDate?: Date): string {
  const options: Intl.DateTimeFormatOptions = { weekday: 'long', day: 'numeric', month: 'long' };
  const startStr = startDate.toLocaleDateString('fr-FR', options);
  
  if (endDate) {
    const endStr = endDate.toLocaleDateString('fr-FR', options);
    if (startDate.toDateString() === endDate.toDateString()) {
      return `le ${startStr}`;
    }
    const startMonth = moisFrancais[startDate.getMonth()];
    const endMonth = moisFrancais[endDate.getMonth()];
    if (startMonth === endMonth) {
      const startDay = startDate.toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric' });
      const endDay = endDate.toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric' });
      return `du ${startDay} au ${endDay} ${startMonth}`;
    }
    return `du ${startStr} au ${endStr}`;
  } else {
    return `le ${startStr}`;
  }
}

function getMonthKey(date: Date) {
  return new Date(date.getFullYear(), date.getMonth(), 1).toISOString(); 
}

const allEvents = allTimelines.map((entry) => {
  const eventDate = new Date(entry.data.date);
  const eventEndDate = entry.data.end_date ? new Date(entry.data.end_date) : undefined;
  return {
    ...entry.data,
    date: eventDate,
    date_end: eventEndDate,
    mois: eventDate.getMonth(),
    annee: eventDate.getFullYear(),
    monthKey: getMonthKey(eventDate),
  };
});

const upcomingEvents = allEvents
  .filter((event) => event.date >= today || event.date.getMonth() === today.getMonth() && event.date.getFullYear() === today.getFullYear())
  .sort((a, b) => a.date.getTime() - b.date.getTime());

const monthGroups = new Map<string, typeof upcomingEvents>();
for (const event of upcomingEvents) {
  if (!monthGroups.has(event.monthKey)) {
    monthGroups.set(event.monthKey, []);
  }
  monthGroups.get(event.monthKey)?.push(event);
}

const sortedKeys = Array.from(monthGroups.keys()).sort(
  (a, b) => new Date(a).getTime() - new Date(b).getTime()
);
---

<Layout title="Agenda">
  <div class="max-w-screen-lg md:mx-auto py-12 md:py-20 px-6 space-y-24">
    
    <!-- PARTIE HEADER CENTRE -->
    <div class="w-full text-center px-6">
      <h2 class="text-2xl md:text-3xl font-bold tracking-tight">Agenda</h2>
      <p class="mt-2 text-lg text-gray-500 dark:text-gray-400">
        Retrouvez les événements cybersécurité à venir !
      </p>
    </div>

    {sortedKeys.map((key) => {
      const events = monthGroups.get(key);
      const refDate = new Date(key);
      const mois = moisFrancais[refDate.getMonth()]?.charAt(0).toUpperCase() + moisFrancais[refDate.getMonth()].slice(1);
      const annee = refDate.getFullYear();

      return (
        <section class="flex flex-col md:flex-row items-start justify-between gap-x-4">
          <h2 class="w-40 md:w-48 text-3xl md:text-4xl font-bold shrink-0 leading-snug tracking-tight flex flex-col">
            <span class="text-gray-900">{mois}</span>
            <span class="text-base md:text-lg font-medium text-gray-500">{annee}</span>
          </h2>

          <div class="w-full md:w-26/32">
            {events?.map((event) => {
              const formattedDate = formatDateRange(event.date, event.date_end);

              return (
                <div class="group flex items-start justify-between gap-4">
                  <div class="flex items-start">
                    <div class="mt-3 mr-5 flex flex-col gap-2 shrink-0 w-[75px] sm:w-[160px] text-end">
                      <h6 class="text-sm text-primary font-semibold">
                        {event.city} - {event.country}
                      </h6>
                      <span class="text-xs sm:text-sm text-muted-foreground">
                        {formattedDate}
                      </span>
                    </div>

                    <div class="relative pb-10 border-l-2 group-last:pb-4 pl-6 sm:pl-8">
                      <div class="absolute h-3 w-3 -translate-x-1/2 -left-px top-4 rounded-full border-2 border-primary bg-background" />
                      <h3 class="text-lg sm:text-xl font-semibold">{event.title}</h3>
                      <p class="text-sm sm:text-base text-muted-foreground">
                        {event.description}
                      </p>
                      {event.link && (
                        <a
                          href={event.link}
                          class="text-primary underline text-sm"
                          target="_blank"
                        >
                          En savoir plus
                        </a>
                      )}
                    </div>
                  </div>

                  {event.picture && (
                    <div class="hidden md:block w-[96px] h-[64px] rounded-md overflow-hidden shrink-0 bg-muted">
                      <Image
                        src={event.picture}
                        alt={event.title}
                        class="object-cover w-full h-full"
                        width={96}
                        height={64}
                      />
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </section>
      );
    })}
  </div>
</Layout>
