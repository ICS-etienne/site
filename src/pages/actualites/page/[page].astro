---
import Layout from '../../../layouts/ContentLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { Badge } from '@/components/starwind/badge';
import { Card, CardContent, CardHeader } from '@/components/starwind/card';
import { Image } from 'astro:assets';

const POSTS_PER_PAGE = 6;

export async function getStaticPaths() {
  const POSTS_PER_PAGE = 6; 
  const allPosts: CollectionEntry<'actualites'>[] = (await getCollection('actualites'))
    .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

  const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);

  return Array.from({ length: totalPages }).map((_, i) => ({
    params: { page: (i + 1).toString() },
  }));
}

// Récupération de la page depuis l'URL
const { page } = Astro.params;
const currentPage = parseInt(page);

const allPosts: CollectionEntry<'actualites'>[] = (await getCollection('actualites'))
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

const start = (currentPage - 1) * POSTS_PER_PAGE;
const end = start + POSTS_PER_PAGE;
const paginatedPosts = allPosts.slice(start, end);

// Gestion des catégories
const bgColors: string[] = [
  'bg-rose-500', 'bg-orange-500', 'bg-amber-500',
  'bg-lime-500', 'bg-emerald-500', 'bg-cyan-500',
  'bg-sky-500', 'bg-violet-500', 'bg-fuchsia-500',
];

const colorMap = new Map<string, string>();
const usedColors = new Set<string>();

function getUniqueBackgroundColor(name: string): string {
  if (colorMap.has(name)) return colorMap.get(name)!;
  const availableColor = bgColors.find((color) => !usedColors.has(color));
  const color = availableColor ?? 'bg-gray-400';
  colorMap.set(name, color);
  usedColors.add(color);
  return color;
}

function getTextColor(_key: string): string {
  return 'text-white';
}

interface Category {
  name: string;
  totalPosts: number;
  background: string;
  color: string;
}

function extractCategories(posts: CollectionEntry<'actualites'>[]): Category[] {
  const map = new Map<string, number>();
  for (const post of posts) {
    const postCategories = post.data.categories || [];
    for (const cat of postCategories) {
      map.set(cat, (map.get(cat) || 0) + 1);
    }
  }
  return Array.from(map.entries()).map(([name, totalPosts]) => ({
    name,
    totalPosts,
    background: getUniqueBackgroundColor(name),
    color: getTextColor(name),
  }));
}

function getCategoryStyle(name: string): string {
  const category = categories.find((c) => c.name === name);
  return category
    ? `${category.background} ${category.color}`
    : 'bg-gray-200 text-gray-800';
}

const categories: Category[] = extractCategories(allPosts);
const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);
---

<Layout title="Actualités – Page {page}">
  <div class="max-w-screen-lg md:mx-auto py-20 px-6">
    <h2 class="text-2xl md:text-3xl font-bold text-center">Actualités</h2>

    <div class="mt-12 flex lg:flex-row lg:gap-12">
      <div class="flex-1 space-y-12">
        {paginatedPosts.map((post) => (
          <a href={`/site/actualites/${post.data.slug}`} class="block hover:opacity-90 transition">
            <Card class="p-4 flex post-item" data-categories={post.data.categories.join(', ')}>
              <CardHeader>
                <div class="hidden sm:block aspect-video w-56 bg-muted rounded-lg">
                  {post.data.image && (
                    <Image
                      src={post.data.image}
                      alt={post.data.title}
                      class="rounded-lg object-fill"
                    />
                  )}
                </div>
              </CardHeader>
              <CardContent class="flex flex-col">
                <div class="flex gap-2 flex-wrap">
                  {post.data.categories.map((cat) => (
                    <Badge class={`hover:bg-opacity-80 ${getCategoryStyle(cat)}`}>
                      {cat}
                    </Badge>
                  ))}
                </div>
                <h3 class="mt-2 text-xl font-semibold">{post.data.title}</h3>
                <p class="text-muted-foreground">{post.data.summary}</p>
                <div class="mt-2 text-sm text-muted-foreground">
                  Par {post.data.author} – {post.data.date.toLocaleDateString()}
                </div>
              </CardContent>
            </Card>
          </a>
        ))}
      </div>

      <!-- Catégories -->
      <div class="hidden lg:block lg:fixed top-20 right-16 shrink-0 w-[180px]">
        <h3 class="text-3xl font-bold tracking-tight mb-4">Catégories</h3>
        <div class="flex flex-col gap-2">
          {categories.map((category) => (
            <Badge class={`block text-center ${getCategoryStyle(category.name)}`}>
              {category.name} ({category.totalPosts})
            </Badge>
          ))}
        </div>
      </div>
    </div>

    <!-- Pagination -->
    <div class="mt-16 flex justify-center gap-4 text-sm font-medium">
      {Array.from({ length: totalPages }).map((_, i) => (
        <a
          href={`/site/actualites/page/${i + 1}`}
          class={`px-3 py-2 rounded-md ${currentPage === i + 1 ? 'bg-slate-800 text-white' : 'bg-slate-100 text-slate-700'}`}
        >
          {i + 1}
        </a>
      ))}
    </div>
  </div>
</Layout>
