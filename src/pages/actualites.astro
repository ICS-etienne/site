---
import Layout from '../layouts/ContentLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { Badge } from '@/components/starwind/badge';
import { Card, CardContent, CardHeader } from '@/components/starwind/card';
import { Image } from 'astro:assets';

const BASE = import.meta.env.BASE_URL;

const posts: CollectionEntry<'actualites'>[] = (await getCollection('actualites'))
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

const bgColors = [
  'bg-rose-500', 'bg-orange-500', 'bg-amber-500',
  'bg-lime-500', 'bg-emerald-500', 'bg-cyan-500',
  'bg-sky-500', 'bg-violet-500', 'bg-fuchsia-500',
];

const colorMap = new Map<string, string>();
const usedColors = new Set<string>();

function getUniqueBackgroundColor(name: string): string {
  if (colorMap.has(name)) return colorMap.get(name)!;
  const availableColor = bgColors.find((color) => !usedColors.has(color));
  const color = availableColor ?? 'bg-gray-400';
  colorMap.set(name, color);
  usedColors.add(color);
  return color;
}

function getTextColor(_key: string) {
  return 'text-white';
}

function extractCategories(posts: CollectionEntry<'actualites'>[]) {
  const map = new Map<string, number>();
  for (const post of posts) {
    const postCategories = post.data.categories || [];
    for (const cat of postCategories) {
      map.set(cat, (map.get(cat) || 0) + 1);
    }
  }
  return Array.from(map.entries()).map(([name, totalPosts]) => ({
    name,
    totalPosts,
    background: getUniqueBackgroundColor(name),
    color: getTextColor(name),
  }));
}

const categories = extractCategories(posts);

function getCategoryStyle(name: string) {
  const category = categories.find((c) => c.name === name);
  return category
    ? `${category.background} ${category.color}`
    : 'bg-gray-200 text-gray-800';
}
---

<Layout title="Actualités">
  <div class="max-w-screen-lg md:mx-auto py-20 px-6">
    <div class="w-full text-center px-6">
      <h2 class="text-2xl md:text-3xl font-bold tracking-tight">Actualités</h2>
      <p class="mt-2 text-lg text-gray-500 dark:text-gray-400">
        Les dernières nouvelles et activités organisées ou suivies par l'association.
      </p>
    </div>

    <div class="mt-12 flex lg:flex-row lg:gap-12">
      <div class="flex-1 mt-4 space-y-12" id="posts-container">
        {posts.map((post) => (
          <a href={`${BASE}/actualites/${post.data.slug}`} class="block hover:opacity-90 transition">
            <Card class="p-4 flex post-item" data-categories={post.data.categories.join(', ')}>
              <CardHeader>
                <div class="hidden sm:block aspect-video w-56 bg-muted rounded-lg">
                  {post.data.image && (
                    <Image
                      src={post.data.image}
                      alt={post.data.title}
                      class="rounded-lg object-fill"
                    />
                  )}
                </div>
              </CardHeader>
              <CardContent class="flex flex-col">
                <div class="flex gap-2 flex-wrap">
                  {post.data.categories.map((cat) => (
                    <Badge class={`hover:bg-opacity-80 ${getCategoryStyle(cat)}`}>
                      {cat}
                    </Badge>
                  ))}
                </div>
                <h3 class="mt-2 text-xl font-semibold">{post.data.title}</h3>
                <p class="text-muted-foreground">{post.data.summary}</p>
                <div class="mt-2 text-sm text-muted-foreground">
                  Par {post.data.author} – {post.data.date.toLocaleDateString()}
                </div>
              </CardContent>
            </Card>
          </a>
        ))}
      </div>

      <div class="hidden lg:block lg:fixed top-20 right-16 shrink-0 w-[180px]">
        <h3 class="text-3xl font-bold tracking-tight mb-4">Catégories</h3>
        <div class="flex flex-col sm:flex-row sm:flex-wrap sm:gap-3 lg:flex-col">
          {categories.map((category) => (
            <label class="flex items-center gap-3 p-3 rounded-md cursor-pointer transition hover:bg-opacity-80 w-auto">
              <input
                type="checkbox"
                class="peer h-6 w-6 cursor-pointer appearance-none rounded-full bg-slate-100 shadow border border-slate-300 checked:bg-slate-800 checked:border-slate-800 transition"
                data-category={category.name}
                checked
              />
              <Badge
                class={`w-[100px] px-3 py-1 rounded-full font-medium text-sm flex justify-between items-center truncate
                  ${getCategoryStyle(category.name)}
                  transition-transform duration-150 ease-in-out motion-safe:hover:scale-[1.03] motion-safe:hover:shadow-md`}
              >
                <span class="truncate">{category.name}</span>
                <span class="text-xs ml-2">{category.totalPosts}</span>
              </Badge>
            </label>
          ))}
        </div>
      </div>
    </div> 
  </div>
</Layout>

<script>
  function filterPosts() {
    const checkedCategories = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
      .map(input => input.getAttribute('data-category') ?? '');

    const posts = document.querySelectorAll('.post-item');

    posts.forEach(post => {
      const postCategories = post.getAttribute('data-categories')?.split(', ') ?? [];
      const isVisible = checkedCategories.some(category => postCategories.includes(category));
      if (post instanceof HTMLElement && post.style) {
        post.style.display = isVisible ? '' : 'none';
      }
    });
  }

  window.onload = () => {
    filterPosts();
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
      checkbox.addEventListener('change', filterPosts);
    });
  };
</script>
